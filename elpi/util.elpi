%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           %                     Trakt                       %
%  _______        _    _    %            Copyright (C) 2022 MERCE             %
% |__   __|      | |  | |   %     (Mitsubishi Electric R&D Centre Europe)     %
%    | |_ __ __ _| | _| |_  %        Enzo Crance <enzo.crance@inria.fr>       %
%    | | '__/ _` | |/ / __| %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    | | | | (_| |   <| |_  % This file is distributed under the terms of the %
%    |_|_|  \__,_|_|\_\\__| %   GNU Lesser General Public License Version 3   %
%                           %  (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% /!\ this file may contain dead code

% compose a list of functions
pred compose-all i:(list term), o:term.

compose-all Functions (fun `H` OriginT F) :-
  Functions = [F1|_],
  coq.typecheck F1 TF1 ok,
  coq.unify-eq TF1 {{ lp:OriginT -> _ }} ok,
  pi x\ decl x _ OriginT => apply-all Functions x (F x).

compose-all [] {{ id }}.

% apply a list of functions to a term
pred apply-all i:(list term), i:term, o:term.

apply-all [] Term Term.

apply-all [F|Fs] Term Term' :-
  apply-all Fs (app [F, Term]) Term'.

pred invert-variance i:type-variance, o:type-variance.

invert-variance covariant contravariant.
invert-variance contravariant covariant.

% beta-reduce a term recursively until there are no applied lambdas left
pred beta-reduce i:term, o:term.

beta-reduce (prod N T F) (prod N T' F') :-
  !, beta-reduce T T',
  pi x\ beta-reduce (F x) (F' x).

beta-reduce (prod2 N T1 T2 F) (prod2 N T1' T2' F') :-
  !, beta-reduce T1 T1',
  beta-reduce T2 T2',
  pi x\ beta-reduce (F x) (F' x).

beta-reduce (app [F|Args]) Term' :-
  !, std.map Args beta-reduce Args',
  beta-reduce F F',
  beta-reduce-app (app [F'|Args']) Term'.

beta-reduce (fun N T F) (fun N T' F') :-
  !, beta-reduce T T',
  pi x\ beta-reduce (F x) (F' x).

beta-reduce Term Term.

pred zeta-reduce i:term, o:term.

zeta-reduce (let _ _ X F) Out :- !,
  zeta-reduce (F X) Out.

zeta-reduce Term Term.

% beta-reduce the head of a function application until no more lambdas are applied
pred beta-reduce-app i:term, o:term.

beta-reduce-app (app [fun _ _ F, X|Args]) Term' :-
  !, beta-reduce-app (app [F X|Args]) Term,
  if (Term = app [OneTermOnly]) (
    Term' = OneTermOnly
  ) (
    Term' = Term
  ).

beta-reduce-app Term Term.

% push a list of hypotheses in front of a type
pred push-all i:(list term), i:term, o:term.

push-all [] Term Term.

push-all [H|Hs] Term {{ lp:H -> lp:Term' }} :-
  push-all Hs Term Term'.

% inverse of previous predicate
pred pop-all i:term, o:(list term), o:term.

pop-all {{ lp:H -> lp:Term }} [H|Hs] Term' :- !,
  pop-all Term Hs Term'.

pop-all Term [] Term.

% like an IF construct but without an ELSE block
pred when i:prop, i:prop.

when Condition P :- if Condition P true.

pred map-merge i:(std.map K V), i:(std.map K V), o:(std.map K V).

map-merge M1 M2 M :-
  std.map.bindings M1 BindingsM1,
  std.fold BindingsM1 M2 map-merge.add M.

% add a forward embedding function to a term if it exists
pred try-add-forward-embedding i:term, i:term, o:term.

try-add-forward-embedding ETarget Term (app [cast E, Term]) :-
  coq.typecheck Term T ok,
  embedding T ETarget E _ _ _ _ _ _, !.

try-add-forward-embedding ETarget Term (app [cast E, Term]) :-
  coq.typecheck Term T' ok,
  embedding T ETarget E _ _ _ _ _ _,
  coq.unify-eq T' T ok, !.

try-add-forward-embedding _ Term Term.

% make a context with its variable being at a specific position in a function application,
% from the part of the AST above the function application (context of a list of terms), the
% arguments that must precede it, and the arguments that must follow it
pred arg-context-from-position
  i:((list term) -> term), i:(list term), i:(list term), o:(term -> term).

arg-context-from-position CtxF ArgsBefore ArgsAfter (t\ CtxF (ArgListF t)) :-
  pi x\ std.append ArgsBefore [x|ArgsAfter] (ArgListF x).

% try to remove "= true" or "= false" in the head of a term and give the associated proof
pred remove-bool-cst-eq i:term, i:type-variance, o:term, o:proof.

remove-bool-cst-eq {{ lp:X = true }} _ X (proof.none {{ lp:X = true }}).

remove-bool-cst-eq {{ true = lp:X }} TVar X (proof.of-term ProofTerm) :-
  if (TVar = covariant) (
    ProofTerm = {{ is_true_symmetry lp:X }}
  ) (
    ProofTerm = {{ is_true_symmetry_contra lp:X }}
  ).

remove-bool-cst-eq {{ lp:X = false }} TVar {{ negb lp:X }} (proof.of-term ProofTerm) :-
  if (TVar = covariant) (
    ProofTerm = {{ false_negb lp:X }}
  ) (
    ProofTerm = {{ false_negb_contra lp:X }}
  ).

remove-bool-cst-eq {{ false = lp:X }} TVar {{ negb lp:X }} (proof.of-term ProofTerm) :-
  if (TVar = covariant) (
    ProofTerm = {{ false_negb_symmetry lp:X }}
  ) (
    ProofTerm = {{ false_negb_symmetry_contra lp:X }}
  ).

pred remove-bool-cst-eq.list
  i:(list term), i:(list type-variance), i:(list proof), o:(list term), o:(list proof).

remove-bool-cst-eq.list [] [] Proofs [] Proofs.

remove-bool-cst-eq.list [Term|Terms] [TVar|TVars] [Proof|Proofs] [Term'|Terms'] [Proof'|Proofs'] :-
  remove-bool-cst-eq Term TVar Term' RmProof,
  remove-bool-cst-eq.list Terms TVars Proofs Terms' Proofs',
  if (RmProof = proof.none _) (
    Proof' = Proof
  ) (
    Proof' = proof.trans TVar [Proof, RmProof]
  ).

% rewrite a term, adding an identity formed by the composition of 2 embedding functions
pred try-add-embedding-identity i:term, i:term, i:type-variance, i:(term -> term), o:term, o:proof.

try-add-embedding-identity ETarget Term TVar CtxF (app [cast RE, app [cast E, Term]]) Proof :-
  coq.typecheck Term T ok,
  embedding T ETarget E RE FBInv _ _ _ _, !,
  Proof = proof.lift-eq TVar CtxF (app [FBInv, Term]).

try-add-embedding-identity ETarget Term TVar CtxF (app [cast RE, app [cast E, Term]]) Proof :-
  conversion-allowed {term-head Term},
  coq.typecheck Term T' ok,
  embedding T ETarget E RE FBInv _ _ _ _,
  coq.unify-eq T' T ok, !,
  Proof = proof.lift-eq TVar CtxF (app [FBInv, Term]).

try-add-embedding-identity _ Term _ CtxF Term (proof.none (CtxF Term)).

pred try-add-embedding-identity.list
  i:term, i:(list term), i:type-variance, i:((list term) -> term), o:(list term), o:(list proof).

try-add-embedding-identity.list ETarget Terms TVar CtxF Terms' Proofs :-
  try-add-embedding-identity.list.aux [] ETarget TVar Terms CtxF Terms' Proofs.

pred split-condition-map i:(std.map term (pair (term -> term) term)), o:(list term), o:(list term).

split-condition-map ConditionMap ConditionTypes ConditionProofs :-
  std.map.bindings ConditionMap Bindings,
  std.map Bindings specialise-condition ConditionTyProofPairs,
  std.unzip ConditionTyProofPairs ConditionTypes ConditionProofs.

% make a simple function type closer to a target by replacing the types of the arguments
% everytime the type to replace is embeddable into the target type
pred targetify-type i:term, i:term, o:term.

targetify-type ETarget {{ lp:T1 -> lp:T2 }} {{ lp:T1' -> lp:T2' }} :- !,
  targetify-type ETarget T1 T1',
  targetify-type ETarget T2 T2'.

targetify-type ETarget T ETarget :-
  embedding T ETarget _ _ _ _ _ _ _, !.

% targetify-type ETarget T ETarget :-
%   conversion-allowed {term-head T},
%   embedding T' ETarget _ _ _ _ _ _ _,
%   coq.unify-eq T' T ok, !.

targetify-type _ T T.

% completely remove any embedding found in a term
pred remove-embeddings i:term, o:term.

remove-embeddings {{ lp:A -> lp:B }} {{ lp:A' -> lp:B' }} :- !,
  remove-embeddings A A',
  remove-embeddings B B'.

remove-embeddings (app [E, Term]) Term' :-
  embedding _ _ E _ _ _ _ _ _, !,
  remove-embeddings Term Term'.

remove-embeddings (app [RE, Term]) Term' :-
  embedding _ _ _ RE _ _ _ _ _, !,
  remove-embeddings Term Term'.

remove-embeddings (app [F|Args]) (app [F|Args']) :-
  !, std.map Args remove-embeddings Args'.

remove-embeddings Term Term.

% merge two sets (function missing from the elpi stdlib)
pred set-merge i:(std.set A), i:(std.set A), o:(std.set A).

set-merge S1 S2 S :-
  std.set.elements S1 ElemS1,
  std.fold ElemS1 S2 std.set.add S.

pred set-merge.list i:(list (std.set A)), o:(std.set A).

set-merge.list [] EmptySet :-
  std.set.make cmp_term EmptySet.

set-merge.list [S|Ss] S'' :-
  set-merge.list Ss S',
  set-merge S S' S''.

% abstract a function application argument without abstracting backward embeddings
% F Args -> generate an elpi function for each argument in Args
% the function will be λx.x except if the argument starts with a backward embedding
% in that case it will be kept (λx. RE x)
pred abstract-arg i:term, i:term, o:(term -> term).

abstract-arg ETarget (app [RE, _]) (x\ app [RE, x]) :-
  embedding _ ETarget _ RE _ _ _ _ _, !.

abstract-arg _ _ (x\ x).

% receive a context, a function, and a list of abstracted arguments (elpi functions made
% with abstract-arg), and make a Coq function to apply these arguments to variables and bind them
% input : Ctx / F / f1...fn / T1...Tn 
% output : fun (a1 : T1) ... (an : Tn) => Ctx (F (f1 a1) ... (fn an))
% (the a1...an are created and bound)
pred bind-abstracted-args i:(term -> term), i:term, i:(list (term -> term)), i:(list term), o:term.

bind-abstracted-args Ctx Head AbsArgFs ArgTypes Term :-
  bind-abstracted-args.aux Ctx Head AbsArgFs ArgTypes [] Term.

pred map-merge.add i:(pair K V), i:(std.map K V), o:(std.map K V).

map-merge.add (pr K V) M M' :-
  std.map.add K V M M'.

pred try-add-embedding-identity.list.aux
   i:(list term), i:term, i:type-variance, i:(list term), i:((list term) -> term),
   o:(list term), o:(list proof).

try-add-embedding-identity.list.aux _ _ _ [] _ [] [].

try-add-embedding-identity.list.aux TermsOk ETarget TVar [Term|Terms] CtxF [Term'|Terms'] Proofs' :-
    arg-context-from-position CtxF TermsOk Terms CtxTermF,
    try-add-embedding-identity ETarget Term TVar CtxTermF Term' Proof,
    std.append TermsOk [Term'] TermsOk',
    try-add-embedding-identity.list.aux
      TermsOk' ETarget TVar Terms CtxF Terms' Proofs,
    if (Proof = proof.none _) (
      Proofs' = Proofs
    ) (
      Proofs' = [Proof|Proofs]
    ).

% NB: here, we remember the terms that have already been processed, so that they can be included
% into the context of future arguments to be processed

% the rewrite proofs are made one after the other, so the proof is sequential, therefore
% every rewrite must include already processed terms in the context of the term that is currently
% being rewritten

% e.g. to rewrite f A B C into f A' B' C'
% - the context for A will be λx.f x B C
% - the context for B will be λx.f A' x C (A' is a processed term)
% - the context for C will be λx.f A' B' x (now has also been processed into B')

% this complexity comes from the fact that when we write "rewrite HA; rewrite HB; rewrite HC" in
% Ltac, Coq infers the context automatically. Here we have more control, because we do not re-read
% the whole goal to create the context, instead we remember it and pass it around with small
% modifications everytime we go to a lower subterm

% (T, (F, P)) -> (F T, P T)
% NB: F is an elpi function that creates the condition type from the variable
%     P is the generalised proof (P : forall x, ...), it must be applied to make a proof
pred specialise-condition i:(pair term (pair (term -> term) term)), o:(pair term term).

specialise-condition (pr Term (pr CondF CondProof)) (pr (CondF Term) (app [CondProof, Term])).

pred bind-abstracted-args.aux
  i:(term -> term), i:term, i:(list (term -> term)), i:(list term), i:(list term), o:term.

bind-abstracted-args.aux Ctx Head [] [] ArgsR (Ctx (app [Head|Args])) :-
  std.rev ArgsR Args.

bind-abstracted-args.aux Ctx Head [AbsArgF|AbsArgFs] [ArgT|ArgTs] Args (fun Name ArgT TermF) :-
  coq.name-suffix `a` {std.length Args} Name,
  pi x\ bind-abstracted-args.aux Ctx Head AbsArgFs ArgTs [AbsArgF x|Args] (TermF x).

pred map-split i:term, i:(std.map term A), o:(std.map term A), o:(std.map term A).

map-split Term M M1 M2 :-
  std.map.bindings M BindingsM,
  map-split.aux BindingsM Term M1 M2.

pred map-split.aux i:(list (pair term A)), i:term, o:(std.map term A), o:(std.map term A).

map-split.aux [] _ EmptyMap EmptyMap :-
  std.map.make cmp_term EmptyMap.

map-split.aux [(pr Term A)|Bindings] X M1' M2' :-
  map-split.aux Bindings X M1 M2,
  if (contains X Term) (
    std.map.add Term A M1 M1',
    M2' = M2
  ) (
    M1' = M1,
    std.map.add Term A M2 M2'
  ).

pred contains i:term, i:term.

contains X T :-
  pi x\ copy X x => copy T (F x),
  pi y\ not (F X = F y).

pred make-fun-type i:term, o:coqfuntype.

make-fun-type T (pr OutT InTs) :-
  make-fun-type.aux T OutT InTs.

pred make-fun-type.aux i:term, o:term, o:(list term).

make-fun-type.aux {{ lp:A -> lp:B }} OutT [A|InB] :-
  !, make-fun-type.aux B OutT InB.

% make-fun-type.aux T OutT [A|InB] :-
%   coq.unify-eq T {{ lp:A -> lp:B }} ok, !,
%   make-fun-type.aux B OutT InB.

make-fun-type.aux T T [].

pred make-coq-type i:coqfuntype, o:term.

make-coq-type (pr OutT InTs) T :-
  make-coq-type.aux OutT InTs T.

pred make-coq-type.aux i:term, i:(list term), o:term.

make-coq-type.aux OutT [A|InB] {{ lp:A -> lp:B }} :-
  !, make-coq-type.aux OutT InB B.

make-coq-type.aux T [] T.

pred interleave i:(list A), i:(list A), o:(list A).

interleave [X|Xs] [Y|Ys] [X,Y|L] :-
  interleave Xs Ys L.

interleave [] [] [].

pred map-find-opt i:K, i:(std.map K V), o:(option V).

map-find-opt K M (some V) :-
  std.map.find K M V, !.

map-find-opt _ _ none.

pred option-get i:(option A), o:A.

option-get (some A) A.

pred option-make i:A, o:(option A).

option-make A (some A).

pred option-bind i:(A -> (option B) -> prop), i:(option A), o:(option B).

option-bind F (some A) BOpt :-
  !, F A BOpt.

option-bind _ none none.

pred spaces i:int, o:string.

spaces N Spaces :-
  std.iota N L,
  std.map L (_\ r\ r = " ") S,
  std.string.concat "" S Spaces.

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% MAKING THE TYPE FOR AN EMBEDDING CONDITION

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% take a type and give the condition that must be generated on any term that is embedded
% from this type to the target type
pred make-condition-type i:coqfuntype, i:term, i:term, o:(option (term -> term)).

% e.g.: for nat, this predicate will return the following condition
%       as an elpi lambda: λx. 0 <= x
%       for (nat -> nat), this is the lambda: λx. 0 <= x -> 0 <= f x

% the variable is not a function
make-condition-type (pr T []) ETarget LTarget CondFOpt :-
  !, make-simple-condition-type T ETarget LTarget CondFOpt.

% the variable is a function
make-condition-type (pr OutT InTs) ETarget LTarget CondFOpt :-
  make-simple-condition-type OutT ETarget LTarget OutCondFOpt,
  if (OutCondFOpt = some OutCondF) (
    make-simple-condition-type.list InTs ETarget LTarget CondFOpts,
    pi f\ combine-condition-types CondFOpts 1 [] f ETarget InTs OutCondF (CondF f),
    CondFOpt = some CondF
  ) (
    % if embedding the output type yields no condition, then there is no condition to generate
    % for the function
    CondFOpt = none
  ).

% make the condition associated to the given type when doing the embedding to the target type
% here "simple" means the type given as argument is not a function type
pred make-simple-condition-type i:term, i:term, i:term, o:(option (term -> term)).

make-simple-condition-type T ETarget LTarget CondFOpt :-
  if (embedding T ETarget _ _ _ _ (some LTarget) (some (prod _ T F)) _) (
    % conditions have type T -> Prop and we want a ETarget -> Prop so we have to generalise the
    % embedded sub-terms as a new variable
    pi x\ generalise x (F x) (pr T []) ETarget F',
    CondFOpt = some F'
  ) (
    CondFOpt = none
  ).

pred make-simple-condition-type.list
  i:(list term), i:term, i:term, o:(list (option (term -> term))).

make-simple-condition-type.list [T|Ts] ETarget LTarget [CondFOpt|CondFOpts] :-
  make-simple-condition-type T ETarget LTarget CondFOpt,
  make-simple-condition-type.list Ts ETarget LTarget CondFOpts.

make-simple-condition-type.list [] _ _ [].

% make one functional condition from argument conditions and the function term
pred combine-condition-types
  i:(list (option (term -> term))), % the argument conditions (arguments with `none` conditions are
                                    % just bound variables used as is in the final condition)
  i:int, i:(list term), % used to remember variables and create names for them
  i:term, % the function concerned by the condition
  i:term, % target embedding type, used for typing the binders
  i:(list term), % types of the arguments of the function
  i:(term -> term), % the condition on the output type of the function
  o:term.

combine-condition-types [CondFOpt|CondFOpts] N Vars F ETarget [InT|InTs] OutCondF Cond :-
  !, N1 is N + 1,
  coq.name-suffix `x` N Name,
  pi x\ combine-condition-types CondFOpts N1 [x|Vars] F ETarget InTs OutCondF (TailCondF x),
  if (CondFOpt = some HeadCondF) (
    Cond = prod Name ETarget (t\ {{ lp:{{ HeadCondF t }} -> lp:{{ TailCondF t }} }})
  ) (
    if (embedding InT ETarget _ _ _ _ _ _ _) (
      Cond = prod Name ETarget TailCondF
    ) (
      Cond = prod Name InT TailCondF
    )
  ).

combine-condition-types [] _ RVars F _ [] OutCondF (OutCondF (app [F|Vars])) :-
  std.rev RVars Vars.

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% MAKING A PROOF FOR AN EMBEDDING CONDITION

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% make a proof for the embedding condition associated to the given type
pred make-condition-proof
  i:coqfuntype, % function type input, so that we can also generate conditions on functions
  i:term, % embedding target type
  i:term, % logic target type to select the right logic for the proof
  o:(option (term -> term)).

% the variable is not a function
make-condition-proof (pr T []) ETarget LTarget CondProofFOpt :-
  make-simple-condition-proof T ETarget LTarget CondProofFOpt.

pred make-simple-condition-proof i:term, i:term, i:term, o:(option (term -> term)).

make-simple-condition-proof T ETarget LTarget CondProofFOpt :-
  if (embedding T ETarget _ _ _ _ (some LTarget) _ (some CondProof)) (
    CondProofFOpt = some (x\ app [CondProof, x])
  ) (
    CondProofFOpt = none
  ).

% the variable is a function
make-condition-proof (pr OutT InTs) ETarget LTarget CondProofFOpt :-
  make-simple-condition-proof OutT ETarget LTarget OutCondProofFOpt,
  if (OutCondProofFOpt = some OutCondProofF) (
    make-reverse-embedding-context.list InTs ETarget REFs,
    pi f\
      combine-reverse-embedding-contexts REFs true 1 [] f ETarget InTs OutCondProofF (CondProofF f),
    CondProofFOpt = some CondProofF
  ) (
    % if embedding the output type yields no condition, then there is no condition to prove
    CondProofFOpt = none
  ).

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% GENERALISING A TERM

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% generalise a term with respect to a subterm
pred generalise
  i:term, % the subterm to replace with a new variable
  i:term, % the term to generalise
  i:coqfuntype, % the type of the variable (function type so that we can generalise on functions)
  i:term, % embedding target type
  o:(term -> term).

generalise X Term FT ETarget F' :-
  pi x\
    % first replace X with a fresh variable
    copy X x => copy Term (F x),
    % then remove embedding functions around this variable everywhere in the term
    remove-embeddings-around x (F x) FT ETarget (F' x).

pred remove-embeddings-around i:term, i:term, i:coqfuntype, i:term, o:term.

remove-embeddings-around X (prod N T F) FT ETarget (prod N T' F') :-
  !, pi x\ remove-embeddings-around X (F x) FT ETarget (F' x),
  remove-embeddings-around X T FT ETarget T'.

remove-embeddings-around X (fun N T F) FT ETarget (fun N T' F') :-
  !, pi x\ remove-embeddings-around X (F x) FT ETarget (F' x),
  remove-embeddings-around X T FT ETarget T'.

remove-embeddings-around X (prod2 N T1 T1' F) FT ETarget (prod2 N T2 T2' F') :-
  !, pi x\ remove-embeddings-around X (F x) FT ETarget (F' x),
  remove-embeddings-around X T1 FT ETarget T2,
  remove-embeddings-around X T1' FT ETarget T2'.

remove-embeddings-around X (app [Emb, X]) (pr T []) ETarget X :-
  (Emb = E ; Emb = cast E),
  embedding T ETarget E _ _ _ _ _ _, !.

remove-embeddings-around X (app [Emb, app [X|Args]]) (pr T ArgTs) ETarget (app [X|Args'']) :-
  (Emb = E ; Emb = cast E),
  embedding T ETarget E _ _ _ _ _ _, !,
  remove-head-reverse-embedding.list Args ArgTs ETarget Args',
  remove-embeddings-around.list X Args' (pr T ArgTs) ETarget Args''.

remove-embeddings-around X (app [X|Args]) (pr T ArgTs) ETarget (app [X|Args'']) :-
  !, remove-head-reverse-embedding.list Args ArgTs ETarget Args',
  remove-embeddings-around.list X Args' (pr T ArgTs) ETarget Args''.

remove-embeddings-around X (app [F|Args]) FT ETarget (app [F'|Args']) :-
  !, remove-embeddings-around.list X Args FT ETarget Args',
  remove-embeddings-around X F FT ETarget F'.

remove-embeddings-around _ Term _ _ Term.

pred remove-embeddings-around.list i:term, i:(list term), i:coqfuntype, i:term, o:(list term).

remove-embeddings-around.list _ [] _ _ [] :- !.

remove-embeddings-around.list X [Term|Terms] FT ETarget [Term'|Terms'] :-
  remove-embeddings-around X Term FT ETarget Term', !,
  remove-embeddings-around.list X Terms FT ETarget Terms'.

pred remove-head-reverse-embedding i:term, i:term, i:term, o:term.

remove-head-reverse-embedding (app [REmb, Term]) T ETarget Term :-
  (REmb = RE ; REmb = cast RE),
  embedding T ETarget _ RE _ _ _ _ _, !.

remove-head-reverse-embedding Term _ _ Term.

pred remove-head-reverse-embedding.list i:(list term), i:(list term), i:term, o:(list term).

remove-head-reverse-embedding.list [] [] _ [] :- !.

remove-head-reverse-embedding.list [Term|Terms] [T|Ts] ETarget [Term'|Terms'] :-
  remove-head-reverse-embedding Term T ETarget Term', !,
  remove-head-reverse-embedding.list Terms Ts ETarget Terms'.

% clear all uses of custom constructors introduced previously during the preprocessing
pred clear-custom-terms i:term, o:term.

clear-custom-terms (prod N T F) (prod N T' F') :-
  !, pi x\ clear-custom-terms (F x) (F' x),
  clear-custom-terms T T'.

clear-custom-terms (fun N T F) (fun N T' F') :-
  !, pi x\ clear-custom-terms (F x) (F' x),
  clear-custom-terms T T'.

clear-custom-terms (prod2 N _ T F) (prod N T' F') :-
  !, pi x\ clear-custom-terms (F x) (F' x),
  clear-custom-terms T T'.

clear-custom-terms (cast E) E :- !.

clear-custom-terms (app [F|Args]) (app [F'|Args']) :-
  !, std.map Args clear-custom-terms Args',
  clear-custom-terms F F'.

clear-custom-terms Term Term.

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% MAKING EMBEDDING CONTEXTS

%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%
%%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%% %%%

% here by context we mean E[x] and not E x (meta-function, not Coq function)
% e.g. λx.Z.of_nat x is λx.E[x], λx.Z.of_nat (f (Z.to_nat x)) is E[f]
pred make-embedding-context i:coqfuntype, i:term, o:(term -> term).

make-embedding-context (pr T []) ETarget EF :-
  !, if (embedding T ETarget E _ _ _ _ _ _) (
    EF = (t\ app [E, t])
  ) (
    EF = (t\ t)
  ).

make-embedding-context (pr OutT InTs) ETarget EF :-
  make-reverse-embedding-context.list InTs ETarget REFs,
  if (embedding OutT ETarget E _ _ _ _ _ _) (
    OutEF = (t\ app [E, t])
  ) (
    OutEF = (t\ t)
  ),
  pi f\ combine-reverse-embedding-contexts REFs false 1 [] f ETarget InTs OutEF (EF f).

pred make-embedding-context.list i:(list term), i:term, o:(list (term -> term)).

make-embedding-context.list [InT|InTs] ETarget [EF|EFs] :-
  make-embedding-context (pr InT []) ETarget EF,
  make-embedding-context.list InTs ETarget EFs.

make-embedding-context.list [] _ [].

% take embedding contexts on the arguments and the output type, and make a Coq function
pred combine-reverse-embedding-contexts
  i:(list (term -> term)), % embedding contexts for every argument of a function
  i:prop, % insert underscores (in case this function is used to make a condition proof)
  i:int, i:(list term), % variables and counter (for naming purposes)
  i:term, % function F for which we create a context
  i:term, % target embedding type
  i:(list term), % source argument types
  i:(term -> term), % embedding context for an application of F
  o:term.

combine-reverse-embedding-contexts [REF|REFs] InsertUS N Args F ETarget [InT|InTs] OutEF E :-
  !, N1 is N + 1,
  coq.name-suffix `x` N Name,
  pi x\
    combine-reverse-embedding-contexts REFs InsertUS N1 [REF x|Args] F ETarget InTs OutEF (EF x),
  if (embedding InT ETarget _ _ _ _ _ CondOpt _) (
    if (InsertUS, CondOpt = some _) (
      E = fun Name ETarget (x\ fun _ _ (t\ EF x))
    ) (
      E = fun Name ETarget EF
    )
  ) (
    E = fun Name InT EF
  ).

combine-reverse-embedding-contexts [] _ _ RArgs F _ [] OutEF (OutEF (app [F|Args])) :-
  std.rev RArgs Args.

pred make-reverse-embedding-context i:coqfuntype, i:term, o:(term -> term).

make-reverse-embedding-context (pr T []) ETarget REF :-
  !, if (embedding T ETarget _ RE _ _ _ _ _) (
    REF = (t\ app [RE, t])
  ) (
    REF = (t\ t)
  ).

make-reverse-embedding-context (pr OutT InTs) ETarget REF :-
  make-embedding-context.list InTs ETarget EFs,
  if (embedding OutT ETarget _ RE _ _ _ _ _) (
    OutREF = (t\ app [RE, t])
  ) (
    OutREF = (t\ t)
  ),
  pi f\ combine-embedding-contexts EFs 1 [] f InTs OutREF (REF f).

pred make-reverse-embedding-context.list i:(list term), i:term, o:(list (term -> term)).

make-reverse-embedding-context.list [InT|InTs] ETarget [REF|REFs] :-
  make-reverse-embedding-context (pr InT []) ETarget REF,
  make-reverse-embedding-context.list InTs ETarget REFs.

make-reverse-embedding-context.list [] _ [].

% same as above but we create a context for F' here, going back into the source types
pred combine-embedding-contexts
  i:(list (term -> term)), i:int, i:(list term), i:term, i:(list term), i:(term -> term),
  o:term.

combine-embedding-contexts [EF|EFs] N Args F [InT|InTs] OutREF (fun Name InT REF) :-
  !, N1 is N + 1,
  coq.name-suffix `x` N Name,
  pi x\ combine-embedding-contexts EFs N1 [EF x|Args] F InTs OutREF (REF x).

combine-embedding-contexts [] _ RArgs F [] OutREF (OutREF (app [F|Args])) :-
  std.rev RArgs Args.

pred elaborate-argument i:argument, o:argument.

elaborate-argument (trm T) (trm ET) :-
  !, coq.elaborate-skeleton T _ ET ok.

elaborate-argument A A.

pred head i:(list A), o:A.

head [H|_] H.

pred term-head i:term, o:term.

term-head (app [app L|_]) H :- !,
  term-head (app L) H.
term-head (app [H|_]) H :- !.
term-head Term Term.

pred unzip3 i:(list (pair A (pair B C))), o:(list A), o:(list B), o:(list C).

unzip3 [] [] [] [].

unzip3 [pr A (pr B C)|Xs] [A|As] [B|Bs] [C|Cs] :-
  unzip3 Xs As Bs Cs.

pred replicate i:int, i:A, o:(list A).

replicate 0 _ [] :- !.

replicate N X [X|L] :-
  N1 is N - 1,
  replicate N1 X L.

pred format-runtime-relation-data i:(list argument), o:(list prop).

format-runtime-relation-data [RRD1|RRD] [RRC1|RRC] :-
  !, RRD1 = trm {{ pair (pair lp:R lp:R') lp:Proof }},
  coq.elaborate-skeleton R T RE ok,
  coq.elaborate-skeleton R' T' RE' ok,
  coq.elaborate-skeleton Proof _ ProofE ok,
  make-fun-type T (pr OutT [T1|_]),
  make-fun-type T' (pr OutT' [T1'|_]),
  RRC1 = relation RE T1 OutT RE' T1' OutT' ProofE,
  format-runtime-relation-data RRD RRC.

format-runtime-relation-data [] [].
